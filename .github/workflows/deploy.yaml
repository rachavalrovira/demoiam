name: Deploy Terraform Application and IAM Resources

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev, qa or prod)'
        required: true
        default: 'dev'

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write
  security-events: write
  actions: read

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.8.2
  PYTHON_VERSION: '3.12.0'

jobs:
  determine-changes:
    runs-on: ubuntu-latest
    outputs:
      iam: ${{ steps.filter.outputs.iam }}
      resources: ${{ steps.filter.outputs.resources }}

    steps:
      - uses: actions/checkout@v4

      - name: Check which folders have changed
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            iam:
              - 'iam/**'  # Ensure this path is correct
            resources:
              - 'resources/**'  # Ensure this path is correct

  iam_resources:
    needs: determine-changes
    if: ${{ needs.determine-changes.outputs.iam == 'true' }}
    name: Create IAM Resources
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}  # Set environment here

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up environment variable
        run: echo "WORKSPACE=${{ github.event.inputs.environment }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials with OIDC
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::876278403405:role/github-oidc-automation
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession
          output-credentials: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Terraform Init and Workspace (IAM Resources)
        run: |
          terraform init -backend-config=../iam/${{ github.event.inputs.environment }}/backend.hcl
          terraform workspace select ${{ github.event.inputs.environment }} || terraform workspace new ${{ github.event.inputs.environment }}
        working-directory: iam

      - name: Terraform Plan (IAM Resources)
        id: plan_iam
        run: |
          VAR_FILE="./${{ github.event.inputs.environment }}/${{ github.event.inputs.environment }}.tfvars"
          PLAN_FILE="plan-${{ github.event.inputs.environment }}-iam.tfplan"
          terraform plan -var-file=$VAR_FILE -out=$PLAN_FILE
        working-directory: iam

      - name: Terraform Plan Status (IAM Resources)
        if: steps.plan_iam.outcome == 'failure'
        run: exit 1
  
      - name: Wait for approval (IAM Resources)
        uses: trstringer/manual-approval@v1
        timeout-minutes: 60
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers:  ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "ðŸš€ IAM Deployment Request"
          issue-body: "New IAM resource deployment requested by @${{ github.actor }} on ${{ github.event.inputs.environment }}."

      - name: Terraform Deploy (IAM Resources)
        run: |
          PLAN_FILE="plan-${{ github.event.inputs.environment }}-iam.tfplan"
          terraform apply -auto-approve $PLAN_FILE
        working-directory: iam

  application_resources:
    needs: 
      - determine-changes
      - iam_resources
    if: ${{ needs.determine-changes.outputs.resources == 'true' }}  # Boolean check without quotes
    name: Create Application Resources

    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}  # Set environment here

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up environment variable
        run: echo "WORKSPACE=${{ github.event.inputs.environment }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials with OIDC
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::876278403405:role/github-oidc-automation
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession
          output-credentials: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Terraform Init and Workspace (Application Resources)
        run: |
          terraform init -backend-config=../resources/${{ github.event.inputs.environment }}/backend.hcl
          terraform workspace select ${{ github.event.inputs.environment }} || terraform workspace new ${{ github.event.inputs.environment }}
        working-directory: resources

      - name: Terraform Plan (Application Resources)
        id: plan_app
        run: |
          VAR_FILE="./${{ github.event.inputs.environment }}/${{ github.event.inputs.environment }}.tfvars"
          PLAN_FILE="plan-${{ github.event.inputs.environment }}-app.tfplan"
          terraform plan -var-file=$VAR_FILE -out=$PLAN_FILE
        working-directory: resources

      - name: Terraform Plan Status (Application Resources)
        if: steps.plan_app.outcome == 'failure'
        run: exit 1
  
      - name: Wait for approval (Application Resources)
        uses: trstringer/manual-approval@v1
        timeout-minutes: 60
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers:  ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "ðŸš€ Application Deployment Request"
          issue-body: "New application resource deployment requested by @${{ github.actor }} on ${{ github.event.inputs.environment }}."

      - name: Terraform Deploy (Application Resources)
        run: |
          PLAN_FILE="plan-${{ github.event.inputs.environment }}-app.tfplan"
          terraform apply -auto-approve $PLAN_FILE
        working-directory: resources
