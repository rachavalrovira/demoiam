<?xml version="1.0" ?>
<testsuites name="trivy">
    <testsuite tests="0" failures="0" name="iam" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="terraform"></property>
        </properties>
    </testsuite>
    <testsuite tests="0" failures="0" name="iam" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="terraform"></property>
        </properties>
    </testsuite>
    <testsuite tests="0" failures="0" name="resources" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="terraform"></property>
        </properties>
    </testsuite>
    <testsuite tests="0" failures="0" name="resources" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="terraform"></property>
        </properties>
    </testsuite>
    <testsuite tests="0" failures="0" name="resources/.terraform/modules/lambda_function_1/examples/container-image/context/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
    </testsuite>
    <testsuite tests="20" failures="1" name="resources/.terraform/modules/lambda_function_1/examples/container-image/context/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS002" time="">
            <failure message="Image user should not be &#39;root&#39;" type="description">Running containers with &#39;root&#39; user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a &#39;USER&#39; statement to the Dockerfile.</failure>
        </testcase>
    </testsuite>
    <testsuite tests="0" failures="0" name="resources/.terraform/modules/lambda_function_1/examples/fixtures/python-app-poetry/docker/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
    </testsuite>
    <testsuite tests="20" failures="1" name="resources/.terraform/modules/lambda_function_1/examples/fixtures/python-app-poetry/docker/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS002" time="">
            <failure message="Image user should not be &#39;root&#39;" type="description">Running containers with &#39;root&#39; user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a &#39;USER&#39; statement to the Dockerfile.</failure>
        </testcase>
    </testsuite>
    <testsuite tests="0" failures="0" name="resources/.terraform/modules/lambda_function_1/examples/fixtures/python-app1/docker/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
    </testsuite>
    <testsuite tests="22" failures="4" name="resources/.terraform/modules/lambda_function_1/examples/fixtures/python-app1/docker/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS002" time="">
            <failure message="Image user should not be &#39;root&#39;" type="description">Running containers with &#39;root&#39; user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a &#39;USER&#39; statement to the Dockerfile.</failure>
        </testcase>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS015" time="">
            <failure message="&#39;yum clean all&#39; missing" type="description">You should use &#39;yum clean all&#39; after using a &#39;yum install&#39; command to clean package cached data and reduce image size.</failure>
        </testcase>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS015" time="">
            <failure message="&#39;yum clean all&#39; missing" type="description">You should use &#39;yum clean all&#39; after using a &#39;yum install&#39; command to clean package cached data and reduce image size.</failure>
        </testcase>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS015" time="">
            <failure message="&#39;yum clean all&#39; missing" type="description">You should use &#39;yum clean all&#39; after using a &#39;yum install&#39; command to clean package cached data and reduce image size.</failure>
        </testcase>
    </testsuite>
    <testsuite tests="0" failures="0" name="resources/.terraform/modules/lambda_function_2/examples/container-image/context/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
    </testsuite>
    <testsuite tests="20" failures="1" name="resources/.terraform/modules/lambda_function_2/examples/container-image/context/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS002" time="">
            <failure message="Image user should not be &#39;root&#39;" type="description">Running containers with &#39;root&#39; user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a &#39;USER&#39; statement to the Dockerfile.</failure>
        </testcase>
    </testsuite>
    <testsuite tests="0" failures="0" name="resources/.terraform/modules/lambda_function_2/examples/fixtures/python-app-poetry/docker/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
    </testsuite>
    <testsuite tests="20" failures="1" name="resources/.terraform/modules/lambda_function_2/examples/fixtures/python-app-poetry/docker/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS002" time="">
            <failure message="Image user should not be &#39;root&#39;" type="description">Running containers with &#39;root&#39; user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a &#39;USER&#39; statement to the Dockerfile.</failure>
        </testcase>
    </testsuite>
    <testsuite tests="0" failures="0" name="resources/.terraform/modules/lambda_function_2/examples/fixtures/python-app1/docker/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
    </testsuite>
    <testsuite tests="22" failures="4" name="resources/.terraform/modules/lambda_function_2/examples/fixtures/python-app1/docker/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS002" time="">
            <failure message="Image user should not be &#39;root&#39;" type="description">Running containers with &#39;root&#39; user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a &#39;USER&#39; statement to the Dockerfile.</failure>
        </testcase>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS015" time="">
            <failure message="&#39;yum clean all&#39; missing" type="description">You should use &#39;yum clean all&#39; after using a &#39;yum install&#39; command to clean package cached data and reduce image size.</failure>
        </testcase>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS015" time="">
            <failure message="&#39;yum clean all&#39; missing" type="description">You should use &#39;yum clean all&#39; after using a &#39;yum install&#39; command to clean package cached data and reduce image size.</failure>
        </testcase>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS015" time="">
            <failure message="&#39;yum clean all&#39; missing" type="description">You should use &#39;yum clean all&#39; after using a &#39;yum install&#39; command to clean package cached data and reduce image size.</failure>
        </testcase>
    </testsuite>
    <testsuite tests="0" failures="0" name="resources/.terraform/modules/lambda_function_3/examples/container-image/context/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
    </testsuite>
    <testsuite tests="20" failures="1" name="resources/.terraform/modules/lambda_function_3/examples/container-image/context/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS002" time="">
            <failure message="Image user should not be &#39;root&#39;" type="description">Running containers with &#39;root&#39; user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a &#39;USER&#39; statement to the Dockerfile.</failure>
        </testcase>
    </testsuite>
    <testsuite tests="0" failures="0" name="resources/.terraform/modules/lambda_function_3/examples/fixtures/python-app-poetry/docker/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
    </testsuite>
    <testsuite tests="20" failures="1" name="resources/.terraform/modules/lambda_function_3/examples/fixtures/python-app-poetry/docker/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS002" time="">
            <failure message="Image user should not be &#39;root&#39;" type="description">Running containers with &#39;root&#39; user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a &#39;USER&#39; statement to the Dockerfile.</failure>
        </testcase>
    </testsuite>
    <testsuite tests="0" failures="0" name="resources/.terraform/modules/lambda_function_3/examples/fixtures/python-app1/docker/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
    </testsuite>
    <testsuite tests="22" failures="4" name="resources/.terraform/modules/lambda_function_3/examples/fixtures/python-app1/docker/Dockerfile" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="dockerfile"></property>
        </properties>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS002" time="">
            <failure message="Image user should not be &#39;root&#39;" type="description">Running containers with &#39;root&#39; user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a &#39;USER&#39; statement to the Dockerfile.</failure>
        </testcase>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS015" time="">
            <failure message="&#39;yum clean all&#39; missing" type="description">You should use &#39;yum clean all&#39; after using a &#39;yum install&#39; command to clean package cached data and reduce image size.</failure>
        </testcase>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS015" time="">
            <failure message="&#39;yum clean all&#39; missing" type="description">You should use &#39;yum clean all&#39; after using a &#39;yum install&#39; command to clean package cached data and reduce image size.</failure>
        </testcase>
        <testcase classname="Dockerfile Security Check" name="[HIGH] DS015" time="">
            <failure message="&#39;yum clean all&#39; missing" type="description">You should use &#39;yum clean all&#39; after using a &#39;yum install&#39; command to clean package cached data and reduce image size.</failure>
        </testcase>
    </testsuite>
    <testsuite tests="0" failures="0" name="terraform-aws-modules/dynamodb-table/aws/resources/.terraform/modules/dynamodb_table/main.tf" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="terraform"></property>
        </properties>
    </testsuite>
    <testsuite tests="0" failures="0" name="terraform-aws-modules/dynamodb-table/aws/resources/.terraform/modules/dynamodb_table/main.tf" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="terraform"></property>
        </properties>
    </testsuite>
    <testsuite tests="0" failures="0" name="terraform-aws-modules/iam/aws/modules/iam-assumable-role/iam/.terraform/modules/dynamodb_writer_role/modules/iam-assumable-role/main.tf" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="terraform"></property>
        </properties>
    </testsuite>
    <testsuite tests="1" failures="0" name="terraform-aws-modules/iam/aws/modules/iam-assumable-role/iam/.terraform/modules/dynamodb_writer_role/modules/iam-assumable-role/main.tf" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="terraform"></property>
        </properties>
    </testsuite>
    <testsuite tests="0" failures="0" name="terraform-aws-modules/lambda/aws/resources/.terraform/modules/lambda_function_1/main.tf" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="terraform"></property>
        </properties>
    </testsuite>
    <testsuite tests="0" failures="0" name="terraform-aws-modules/lambda/aws/resources/.terraform/modules/lambda_function_1/main.tf" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="terraform"></property>
        </properties>
    </testsuite>
    <testsuite tests="0" failures="0" name="terraform-aws-modules/lambda/aws/resources/.terraform/modules/lambda_function_2/main.tf" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="terraform"></property>
        </properties>
    </testsuite>
    <testsuite tests="0" failures="0" name="terraform-aws-modules/lambda/aws/resources/.terraform/modules/lambda_function_2/main.tf" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="terraform"></property>
        </properties>
    </testsuite>
    <testsuite tests="0" failures="0" name="terraform-aws-modules/lambda/aws/resources/.terraform/modules/lambda_function_3/main.tf" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="terraform"></property>
        </properties>
    </testsuite>
    <testsuite tests="0" failures="0" name="terraform-aws-modules/lambda/aws/resources/.terraform/modules/lambda_function_3/main.tf" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="terraform"></property>
        </properties>
    </testsuite>
    <testsuite tests="0" failures="0" name="terraform-aws-modules/s3-bucket/aws/resources/.terraform/modules/s3_bucket/main.tf" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="terraform"></property>
        </properties>
    </testsuite>
    <testsuite tests="7" failures="0" name="terraform-aws-modules/s3-bucket/aws/resources/.terraform/modules/s3_bucket/main.tf" errors="0" skipped="0" time="">
        <properties>
            <property name="type" value="terraform"></property>
        </properties>
    </testsuite>
</testsuites>